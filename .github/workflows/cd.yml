name: Continuous Deployment to AWS EC2 (Clone Only) - Tanpa PM2

on:
  push: # Trigger workflow ini setiap kali ada push ke branch utama
    branches:
      - master
      - main # Tentukan branch utama Anda

jobs:
  deploy:
    runs-on: ubuntu-latest # Menggunakan runner Ubuntu terbaru
    environment: production # Opsional: Menunjukkan ini adalah deployment ke lingkungan produksi

    steps:
      - uses: actions/checkout@v4 # Checkout kode dari repository (diperlukan untuk konteks GITHUB_WORKSPACE, meskipun tidak disalin ke EC2)

      # --- Proses Deployment via SSH ke EC2 ---
      - name: Deploy to EC2 via SSH (Clone Only, Tanpa PM2)
        uses: appleboy/ssh-action@master # Menggunakan action pihak ketiga untuk SSH
        with:
          host: 54.179.173.63 # Host EC2 Anda
          username: ubuntu # Username SSH EC2 Anda
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # Private Key SSH EC2 dari GitHub Secrets
          script: |
            # Mengaktifkan mode "exit on error" untuk debugging
            set -e
            
            # Variabel untuk username yang digunakan untuk SSH
            SSH_USER=${{ secrets.EC2_USER || 'ubuntu' }} # Gunakan secrets.EC2_USER jika ada, default ke ubuntu
            
            # Variabel untuk direktori aplikasi di EC2.
            # Anda bisa menggantinya dengan secrets.APP_DIR jika Anda ingin menyimpannya di GitHub Secrets.
            APP_DIR="/home/ubuntu/my-app" 
            
            # URL repositori Git Anda.
            # Sekarang sudah diatur secara langsung.
            REPO_URL="https://github.com/arisdp/forum-api-starter-project" 
            
            # Nama aplikasi untuk systemd service.
            # Sekarang sudah diatur secara langsung.
            SYSTEMD_SERVICE_NAME="forum-api-starter-project" 
            
            # Script untuk memulai aplikasi.
            # Sekarang sudah diatur secara langsung.
            APP_START_SCRIPT="npm run start" 

            echo "--- Memulai Deployment (Metode Clone Only, Tanpa PM2) ---"
            echo "Current user on EC2: $(whoami)"
            echo "Target APP_DIR: $APP_DIR"
            echo "Repository URL: $REPO_URL"
            echo "Systemd Service Name: $SYSTEMD_SERVICE_NAME"

            # Pastikan direktori induk dari APP_DIR ada dan user memiliki izin yang benar
            # Ini penting jika APP_DIR belum pernah dibuat sebelumnya
            sudo mkdir -p "$(dirname "$APP_DIR")"
            sudo chown -R "$SSH_USER":"$SSH_USER" "$(dirname "$APP_DIR")"

            # 1. Clone atau Pull Repositori
            if [ -d "$APP_DIR/.git" ]; then
                echo "Repositori sudah ada di EC2 dan merupakan repositori Git. Melakukan git pull..."
                cd "$APP_DIR"
                # Pastikan user memiliki izin yang benar di direktori repo sebelum pull
                sudo chown -R "$SSH_USER":"$SSH_USER" . 
                git pull origin ${{ github.ref_name }} # Pull dari branch yang sedang di-deploy
            else
                # Jika direktori tidak ada, atau ada tapi bukan repositori Git, lakukan clone baru.
                # Pastikan direktori bersih sebelum clone.
                if [ -d "$APP_DIR" ]; then
                    echo "Direktori $APP_DIR ada tapi bukan repositori Git. Menghapus direktori lama..."
                    sudo rm -rf "$APP_DIR"
                fi
                echo "Repositori belum ada di EC2 atau bukan repositori Git. Melakukan git clone..."
                git clone "$REPO_URL" "$APP_DIR"
                cd "$APP_DIR"
                # Pastikan user memiliki izin yang benar di direktori repo setelah clone
                sudo chown -R "$SSH_USER":"$SSH_USER" . 
            fi
            
            echo "Current working directory on EC2: $(pwd)"
            echo "Permissions in APP_DIR after clone/pull:"
            ls -la .

            # 2. Buat atau perbarui file .env untuk environment variables RDS dan Token
            echo "--- Membuat/Memperbarui file .env ---"
            echo "PGUSER=${{ secrets.RDS_DB_USER }}" > .env
            echo "PGHOST=${{ secrets.RDS_DB_HOST }}" >> .env
            echo "PGDATABASE=${{ secrets.RDS_DB_NAME }}" >> .env
            echo "PGPASSWORD=${{ secrets.RDS_DB_PASSWORD }}" >> .env
            echo "PGPORT=${{ secrets.RDS_DB_PORT }}" >> .env
            echo "PGUSER_TEST=developer" >> .env
            echo "PGHOST_TEST=forumapi-test.czoqiq2k8qc3.ap-southeast-1.rds.amazonaws.com" >> .env
            echo "PGDATABASE_TEST=forumapi-test" >> .env
            echo "PGPASSWORD_TEST=supersecretpassword" >> .env
            echo "PGPORT_TEST=5432" >> .env
            echo "ACCESS_TOKEN_KEY=8b7b4ef375716ab08b2a3951b29d52fc00b1c855f9d1a847229b8c5935bef56d9d271e76a9cf08e614300395c3b90ebe559cf968a0741b18c9505549394b2c70" >> .env
            echo "REFRESH_TOKEN_KEY=5078605e074a462b1460608fcbe0d0963c644402e04ad334455ff5a856cb43fd99825861dde02957d5e3184c90c532ca7d0249df20fe93d535632f3d11be7bad" >> .env
            echo "ACCCESS_TOKEN_AGE=3000" >> .env
            echo ".env file content:"
            cat .env # Menampilkan isi .env untuk verifikasi

            # 3. Instal atau perbarui dependensi Node.js di server EC2
            echo "Menginstal/memperbarui dependensi Node.js..."
            npm install --production
            echo "Dependensi Node.js terinstal."

            # 4. Jalankan migrasi database (Jika aplikasi Anda memiliki migrasi DB)
            echo "Menjalankan migrasi database..."
            npm run migrate # Baris ini diubah untuk menjalankan migrasi menggunakan npm script
            echo "Perintah migrasi database dieksekusi (jika dikonfigurasi)."

            # 5. Buat atau perbarui systemd service file
            echo "--- Membuat/Memperbarui systemd service file ---"
            # Pastikan user SSH_USER memiliki izin untuk menulis ke /etc/systemd/system/
            # Ini memerlukan sudo
            sudo tee /etc/systemd/system/"$SYSTEMD_SERVICE_NAME".service > /dev/null <<EOF
            [Unit]
            Description=Node.js Application: $SYSTEMD_SERVICE_NAME
            After=network.target

            [Service]
            User=$SSH_USER
            WorkingDirectory=$APP_DIR
            EnvironmentFile=$APP_DIR/.env
            ExecStart=/usr/bin/node $APP_DIR/$APP_START_SCRIPT
            Restart=always
            RestartSec=10
            StandardOutput=syslog
            StandardError=syslog
            SyslogIdentifier=$SYSTEMD_SERVICE_NAME

            [Install]
            WantedBy=multi-user.target
            EOF
            echo "Systemd service file $SYSTEMD_SERVICE_NAME.service berhasil dibuat/diperbarui."

            # 6. Reload systemd daemon, hentikan, dan mulai ulang/mulai aplikasi
            echo "Me-reload systemd daemon..."
            sudo systemctl daemon-reload
            echo "Menghentikan layanan $SYSTEMD_SERVICE_NAME (jika berjalan)..."
            sudo systemctl stop "$SYSTEMD_SERVICE_NAME" || true # '|| true' agar script tidak gagal jika layanan belum berjalan
            echo "Memulai/memulai ulang layanan $SYSTEMD_SERVICE_NAME..."
            sudo systemctl start "$SYSTEMD_SERVICE_NAME"
            echo "Mengaktifkan layanan $SYSTEMD_SERVICE_NAME agar otomatis dimulai saat boot..."
            sudo systemctl enable "$SYSTEMD_SERVICE_NAME"
            
            echo "--- Deployment Selesai ---"

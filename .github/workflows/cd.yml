name: Continuous Deployment to AWS EC2

on:
  push: # Trigger workflow ini setiap kali ada push ke branch utama
    branches:
      - master
      - main # Tentukan branch utama Anda

jobs:
  deploy:
    runs-on: ubuntu-latest # Menggunakan runner Ubuntu terbaru
    environment: production # Opsional: Menunjukkan ini adalah deployment ke lingkungan produksi

    steps:
      - uses: actions/checkout@v4 # Checkout kode dari repository

      # --- Proses Deployment via SSH ke EC2 ---
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master # Menggunakan action pihak ketiga untuk SSH
        with:
          host: 54.179.173.63 # Host EC2 Anda
          username: ubuntu # Username SSH EC2 Anda
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }} # Private Key SSH EC2 dari GitHub Secrets
          script: |
            # Mengaktifkan mode "exit on error" untuk debugging
            set -e

            # Variabel untuk username yang digunakan untuk SSH
            SSH_USER=${{ secrets.EC2_USER || 'aries' }} # Gunakan secrets.EC2_USER jika ada, default ke ubuntu

            echo "--- Memulai Deployment ---"
            echo "Current user on EC2: $(whoami)"
            echo "Target APP_DIR: ${{ secrets.APP_DIR }}"

            # 1. Pastikan direktori aplikasi ada dan navigasi ke sana
            # Buat direktori jika belum ada, dan pastikan user memiliki izin
            sudo mkdir -p ${{ secrets.APP_DIR }}
            sudo chown -R $SSH_USER:$SSH_USER ${{ secrets.APP_DIR }}
            cd ${{ secrets.APP_DIR }}

            echo "Current working directory on EC2: $(pwd)"
            echo "Permissions in APP_DIR before file copy:"
            ls -la .

            # 2. Hentikan aplikasi yang sedang berjalan (jika ada)
            pm2 stop ${{ secrets.APP_NAME }} || true
            echo "PM2 stop command executed."

            # 3. Hapus file lama di direktori aplikasi (kecuali node_modules dan .env)
            # Ini akan menghapus semua file dan folder di root APP_DIR kecuali yang dikecualikan.
            find . -maxdepth 1 -mindepth 1 ! -name "node_modules" ! -name ".env" -exec rm -rf {} +
            echo "Old files removed (excluding node_modules and .env)."
            echo "Files after removal:"
            ls -la .

            # 4. Salin file baru dari runner GitHub Actions ke EC2
            # Pastikan user yang menyalin memiliki izin yang benar
            sudo cp -r $GITHUB_WORKSPACE/. .
            # Setelah disalin, pastikan kepemilikan file diatur kembali ke user SSH
            sudo chown -R $SSH_USER:$SSH_USER .
            echo "New files copied from GitHub Workspace."
            echo "Files after copy:"
            ls -la .

            # 5. Buat atau perbarui file .env untuk environment variables RDS dan Token
            # Pastikan perintah ini dijalankan sebagai user yang memiliki izin tulis
            # Karena kita sudah chown direktori, echo seharusnya bisa menulis langsung.
            echo "--- Creating/Updating .env file ---"
            echo "PGUSER=${{ secrets.RDS_DB_USER }}" > .env
            echo "PGHOST=${{ secrets.RDS_DB_HOST }}" >> .env
            echo "PGDATABASE=${{ secrets.RDS_DB_NAME }}" >> .env
            echo "PGPASSWORD=${{ secrets.RDS_DB_PASSWORD }}" >> .env
            echo "PGPORT=${{ secrets.RDS_DB_PORT }}" >> .env

            echo "PGUSER_TEST=developer" >> .env
            echo "PGHOST_TEST=forumapi-test.czoqiq2k8qc3.ap-southeast-1.rds.amazonaws.com" >> .env
            echo "PGDATABASE_TEST=forumapi-test" >> .env
            echo "PGPASSWORD_TEST=supersecretpassword" >> .env
            echo "PGPORT_TEST=5432" >> .env

            echo "ACCESS_TOKEN_KEY=8b7b4ef375716ab08b2a3951b29d52fc00b1c855f9d1a847229b8c5935bef56d9d271e76a9cf08e614300395c3b90ebe559cf968a0741b18c9505549394b2c70" >> .env
            echo "REFRESH_TOKEN_KEY=5078605e074a462b1460608fcbe0d0963c644402e04ad334455ff5a856cb43fd99825861dde02957d5e3184c90c532ca7d0249df20fe93d535632f3d11be7bad" >> .env
            echo "ACCCESS_TOKEN_AGE=3000" >> .env
            echo ".env file content:"
            cat .env # Menampilkan isi .env untuk verifikasi

            # 6. Instal atau perbarui dependensi Node.js di server EC2
            echo "Installing/updating Node.js dependencies..."
            npm install --production
            echo "Node.js dependencies installed."

            # 7. Jalankan migrasi database (Jika aplikasi Anda memiliki migrasi DB)
            echo "Running database migrations..."
            # Ganti dengan perintah migrasi yang sesuai dengan proyek Anda.
            # Contoh Knex.js: npx knex migrate:latest
            # Pastikan Knex.js terinstal secara global atau sebagai dev dependency di proyek Anda.
            # npx knex migrate:latest
            echo "Database migrations command executed (if configured)."

            # 8. Mulai ulang/mulai aplikasi dengan PM2
            echo "Starting/restarting application with PM2..."
            pm2 start ${{ secrets.APP_START_SCRIPT }} --name ${{ secrets.APP_NAME }} --env ./.env || pm2 restart ${{ secrets.APP_NAME }}
            pm2 save # Menyimpan status PM2 agar aplikasi otomatis dimulai saat reboot server
            echo "PM2 start/restart command executed."
            echo "--- Deployment Selesai ---"